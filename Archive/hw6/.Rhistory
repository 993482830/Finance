colnames(m)<- c("alpha", "beta", "long_run_var","first_variance")
rownames(m)<- c("part a", "part b", "part c", "part d")
m$var_garch <- NA
sigma_sq = vector(mode="numeric",length=1000)
m
for (j in 1:4)
{
sigma_sq[1]=m$first_variance[j]
for (i in 2:1000)
{
sigma_sq[i]= (1-m$alpha[j]-m$beta[j])*m$long_run_var[j]+m$alpha[j]*sp_subset[i-1,1]+m$beta[j]*sigma_sq[i-1]
}
m$var_garch[j]= (1-m$alpha[j]-m$beta[j])*m$long_run_var[j]+m$alpha[j]*sp_subset[1000,1]+m$beta[j]*sigma_sq[1000]
}
m
sqrt(3.535048e-05)
sqrt(var_garch)
sqrt(m$var_garch)
var_forecast<- rep(0,4)
for (j in 1:4)
{
for (i in 1:21)
{
var_forecast[j]= (m$alpha[j]+m$beta[j])^(i-1)*(m$var_garch[j]-m$long_run_var[j])
}
var_forecast[j]= var_forecast[j] + 21*m$long_run_var[j]
}
annualized_st.dev <- sqrt(var_forecast*252/21)
forecasts<- cbind(var_forecast,annualized_st.dev)
View(forecasts)
log_likelihood_4<-function(gamma,x){
sigma_square_4=vector(mode="numeric",length=1000)
sigma_square_4[1]=gamma[4]^2
for(i in 2:1000){
sigma_square_4[i]=(1-gamma[1]*(1+gamma[5]^2)-gamma[2])*gamma[3]^2+gamma[1]*(sqrt(x[i-1])-gamma[5]*sqrt(sigma_square_4[i-1]))^2+gamma[2]*sigma_square_5[i-1]
}
logl<-(-0.5)*sum(log(sigma_square_4)+x/sigma_square_4)
return(-logl)
}
initial_value_4=c(mle$par[1],mle$par[2],mle$par[3],mle$par[4],0)
mle_4=optim(initial_value_4,log_likelihood_4,x=sp_subset[,1])
mle_4$par
log_likelihood_4<-function(gamma,x){
sigma_square_4=vector(mode="numeric",length=1000)
sigma_square_4[1]=gamma[4]^2
for(i in 2:1000){
sigma_square_4[i]=(1-gamma[1]*(1+gamma[5]^2)-gamma[2])*gamma[3]^2+gamma[1]*(sqrt(x[i-1])-gamma[5]*sqrt(sigma_square_4[i-1]))^2+gamma[2]*sigma_square_4[i-1]
}
logl<-(-0.5)*sum(log(sigma_square_4)+x/sigma_square_4)
return(-logl)
}
initial_value_4=c(mle$par[1],mle$par[2],mle$par[3],mle$par[4],0)
mle_4=optim(initial_value_4,log_likelihood_4,x=sp_subset[,1])
mle_4$par
log_likelihood_4 <- function (theta)
{
l1 = -0.5*(log(theta[1]) + sp_subset[1,1]/theta[1])
sigma_sq[1]=theta[1]
l=l1
for (i in 2:1000)
{
sigma_sq[i] = (1-theta[2]*(1+theta[5]^2) - theta[3])*theta[4]+theta[2]*(sqrt(sp_subset[i-1,1])-tehta[5]*sigma_sq[i-1])^2+ theta[3]*sigma_sq[i-1]
l = l - 0.5*((log(sigma_sq[i]) + sp_subset[i,1]/sigma_sq[i]))
}
return(-l)
}
initial_value <- c(m$first_variance[1], m$alpha[1], m$beta[1], m$long_run_var[1],0)
u<- rbind(c(1,0,0,0,0), c(0,1,0,0,0), c(0,0,1,0,0), c(0,0,0,1,0), c(0,-1,-1,0,0))
c<- c(0,0,0,0,-1)
mle_4<- constrOptim(initial_value,log_likelihood, grad = NULL, u, c)
mle_4$par
log_likelihood_4 <- function (theta)
{
l1 = -0.5*(log(theta[1]) + sp_subset[1,1]/theta[1])
sigma_sq[1]=theta[1]
l=l1
for (i in 2:1000)
{
sigma_sq[i] = (1-theta[2]*(1+theta[5]^2) - theta[3])*theta[4]+theta[2]*(sqrt(sp_subset[i-1,1])-tehta[5]*sigma_sq[i-1])^2+ theta[3]*sigma_sq[i-1]
l = l - 0.5*((log(sigma_sq[i]) + sp_subset[i,1]/sigma_sq[i]))
}
return(-l)
}
initial_value <- c(m$first_variance[1], m$alpha[1], m$beta[1], m$long_run_var[1],0)
u<- rbind(c(1,0,0,0,0), c(0,1,0,0,0), c(0,0,1,0,0), c(0,0,0,1,0), c(0,-1,-1,0,0))
c<- c(0,0,0,0,-1)
mle_4<- constrOptim(initial_value,log_likelihood, grad = NULL, u, c)
mle_4$par
llog_likelihood_4 <- function (theta)
{
l1 = -0.5*(log(theta[1]) + sp_subset[1,1]/theta[1])
sigma_sq[1]=theta[1]
l=l1
for (i in 2:1000)
{
sigma_sq[i] = (1-theta[2]*(1+theta[5]^2) - theta[3])*theta[4]+theta[2]*(sqrt(sp_subset[i-1,1])-tehta[5]*sigma_sq[i-1])^2+ theta[3]*sigma_sq[i-1]
l = l - 0.5*((log(sigma_sq[i]) + sp_subset[i,1]/sigma_sq[i]))
}
return(-l)
}
initial_value <- c(m$first_variance[1], m$alpha[1], m$beta[1], m$long_run_var[1],0)
u<- rbind(c(1,0,0,0,0), c(0,1,0,0,0), c(0,0,1,0,0), c(0,0,0,1,0), c(0,-1,-1,0,0))
c<- c(0,0,0,0,-1)
mle_4<- constrOptim(initial_value,llog_likelihood_4, grad = NULL, u, c)
mle_4$par
#Question 3:
#part a:
log_likelihood_4<-function(theta,x){
sigma_square_4=vector(mode="numeric",length=1000)
sigma_square_4[1]=theta[4]^2
for(i in 2:1000){
sigma_square_4[i]=(1-theta[1]*(1+theta[5]^2)-theta[2])*theta[3]^2+theta[1]*(sqrt(x[i-1])-theta[5]*sqrt(sigma_square_4[i-1]))^2+theta[2]*sigma_square_4[i-1]
}
logl<-(-0.5)*sum(log(sigma_square_4)+x/sigma_square_4)
return(-logl)
}
initial_value_4=c(mle$par[1],mle$par[2],mle$par[3],mle$par[4],0)
mle_4=optim(initial_value_4,log_likelihood_4,x=sp_subset[,1])
mle_4$par
#part b:
mle$value
mle_4$value
#those are already logs of likelihood
LR<- 2*(-mle_4$value-(-mle$value))
#H0: theta[5]=0 Reject if LR>Chi-square test
#fail to reject H0 for both
qchisq(0.95, df=1)
qchisq(0.99, df=1)
#part b:
mle$value
mle_4$value
#those are already logs of likelihood
LR<- 2*log(mle_4$value/mle$value)
#H0: theta[5]=0 Reject if LR>Chi-square test
#fail to reject H0 for both
qchisq(0.05, df=1)
qchisq(0.01, df=1)
LR
LR<- 2*(mle$value-mle_4$value)
LR
log_likelihood_4<-function(theta,x){
sigma_square_4=vector(mode="numeric",length=1000)
sigma_square_4[1]=theta[4]^2
for(i in 2:1000){
sigma_square_4[i]=(1-theta[1]*(1+theta[5]^2)-theta[2])*theta[3]^2+theta[1]*(sqrt(x[i-1])-theta[5]*sqrt(sigma_square_4[i-1]))^2+theta[2]*sigma_square_4[i-1]
}
logl<-(-0.5)*sum(log(sigma_square_4)+x/sigma_square_4)
return(-logl)
}
initial_value_4=c(mle$par[1],mle$par[2],mle$par[3],mle$par[4],0)
mle_4=optim(initial_value_4,log_likelihood_4,x=sp_subset[,1])
mle_4$par
mle$value
mle_4$value
data1_square_return
data1_square_return=sp_subset
initialvalue=c(0.18,0.7,sqrt(mean(data1_square_return)),sqrt(mean(data1_square_return[1:10])))
likel<-function(theta,x){
alpha=theta[1]
beta=theta[2]
sigma=theta[3]
sigma1=theta[4]
n=length(x)
sigma_square=vector(mode="numeric",length=n)
sigma_square[1]=sigma1^2
for(i in 2:n){
sigma_square[i]=(1-alpha-beta)*sigma^2+alpha*x[i-1]+beta*sigma_square[i-1]
}
logl<-(-0.5)*(sum(log(sigma_square)+x/sigma_square))
return(-logl)
}
estimation_1=optim(initialvalue,likel,x=data1_square_return)
estimation_1$par
initialvalue=c(0.18,0.7,sqrt(mean(data1_square_return)),sqrt(mean(data1_square_return[1:10])))
likel<-function(theta,x){
alpha=theta[1]
beta=theta[2]
sigma=theta[3]
sigma1=theta[4]
n=length(x)
sigma_square=vector(mode="numeric",length=n)
sigma_square[1]=sigma1^2
for(i in 2:n){
sigma_square[i]=(1-alpha-beta)*sigma^2+alpha*x[i-1]+beta*sigma_square[i-1]
}
logl<-(-0.5)*(sum(log(sigma_square)+x/sigma_square))
return(-logl)
}
estimation_1=optim(initialvalue,likel,x=data1_square_return[,1])
estimation_1$par
estimation$value
estimation_1$value
likel<-function(theta,x){
alpha=theta[1]
beta=theta[2]
sigma=theta[3]
sigma1=theta[4]
n=length(x)
sigma_square=vector(mode="numeric",length=n)
sigma_square[1]=sigma1^2
for(i in 2:n){
sigma_square[i]=(1-alpha-beta)*sigma^2+alpha*x[i-1]+beta*sigma_square[i-1]
}
logl<-(-0.5)*(sum(log(sigma_square))+x/sigma_square)
return(-logl)
}
estimation_1=optim(initialvalue,likel,x=data1_square_return)
estimation_1$par
likel<-function(theta,x){
alpha=theta[1]
beta=theta[2]
sigma=theta[3]
sigma1=theta[4]
n=length(x)
sigma_square=vector(mode="numeric",length=n)
sigma_square[1]=sigma1^2
for(i in 2:n){
sigma_square[i]=(1-alpha-beta)*sigma^2+alpha*x[i-1]+beta*sigma_square[i-1]
}
logl<-(-0.5)*(sum(log(sigma_square))+x/sigma_square)
return(-logl)
}
estimation_1=optim(initialvalue,likel,x=data1_square_return[,1])
estimation_1$par
setwd("/Users/user/Documents/UIUC/2017Spring/FIN567/hw6")
#Question 1:
#Part a:
#------:
library(quantmod)
#get the data
getSymbols("^GSPC")
sp <- GSPC[,6]
sp <- as.data.frame(sp)
colnames(sp) <- "Prices"
rm(GSPC)
sp <- na.omit(sp)
#compute log returns
sp$temp <- log(sp$Prices)
sp$logreturns[2:nrow(sp)]<- diff(sp$temp, lag=1)
sp<- sp[-2]
#Initial guesses
start=2552-999
end=2552
sp_subset<- (sp$logreturns[start:end])^2
sp_subset<- as.data.frame(sp_subset)
sample_variance<- mean(sp_subset[,1])
first_variance<- mean(sp_subset$sp_subset[1:10])
#MLE Function
log_likelihood <- function(theta,x){
sigma_square=vector(mode="numeric",length=1000)
sigma_square[1]=theta[4]^2
for(i in 2:1000){
sigma_square[i]=(1-theta[1]-theta[2])*theta[3]^2+theta[1]*x[i-1]+theta[2]*sigma_square[i-1]
}
logl<-(-0.5)*(sum(log(sigma_square)+x/sigma_square))
return(-logl)
}
initial_value=c(0.18,0.7,sqrt(sample_variance),sqrt(first_variance))
mle=optim(initial_value,log_likelihood,x=sp_subset[,1])
mle$par
#part b:
#------:
log_likelihood_1 <- function(theta,x){
sigma_square_1=vector(mode="numeric",length=1000)
sigma_square_1[1]=theta[3]^2
for(i in 2:1000){
sigma_square_1[i]=(1-theta[1]-theta[2])*sample_variance+theta[1]*x[i-1]+theta[2]*sigma_square_1[i-1]
}
logl<-(-0.5)*(sum(log(sigma_square_1)+x/sigma_square_1))
return(-logl)
}
initial_value_1=c(0.18,0.7,sqrt(first_variance))
mle_1<- optim(initial_value_1,log_likelihood_1, x=sp_subset[,1])
mle_1$par
print(sqrt(sample_variance))
#part c:
log_likelihood_2 <- function(theta,x){
sigma_square_2=vector(mode="numeric",length=1000)
sigma_square_2[1]=sample_variance
for(i in 2:1000){
sigma_square_2[i]=(1-theta[1]-theta[2])*theta[3]^2+theta[1]*x[i-1]+theta[2]*sigma_square_2[i-1]
}
logl<-(-0.5)*(sum(log(sigma_square_2)+x/sigma_square_2))
return(-logl)
}
initial_value_2=c(0.18,0.7,sqrt(sample_variance))
mle_2=optim(initial_value_2,log_likelihood_2,x=sp_subset[,1])
mle_2$par
#part d:
log_likelihood_3 <- function(theta,x){
sigma_square_3=vector(mode="numeric",length=1000)
sigma_square_3[1]=sample_variance
for(i in 2:1000){
sigma_square_3[i]=(1-theta[1]-theta[2])*sample_variance+theta[1]*x[i-1]+theta[2]*sigma_square_3[i-1]
}
logl<-(-0.5)*(sum(log(sigma_square_3)+x/sigma_square_3))
return(-logl)
}
initial_value_3=c(0.18,0.7)
mle_3=optim(initial_value_3,log_likelihood_3,x=sp_subset[,1])
mle_3$par
#part e:
#------:
m<- as.data.frame(rbind(c(mle$par[1:2], mle$par[3]^2,mle$par[4]^2), c(mle_1$par[1:2],sample_variance,mle_1$par[3]^2), c(mle_2$par[1:2],mle_2$par[3]^2,first_variance), c(mle_3$par, sample_variance,first_variance)))
colnames(m)<- c("alpha", "beta", "long_run_var","first_variance")
rownames(m)<- c("part a", "part b", "part c", "part d")
m$var_garch <- NA
sigma_sq = vector(mode="numeric",length=1000)
for (j in 1:4)
{
sigma_sq[1]=m$first_variance[j]
for (i in 2:1000)
{
sigma_sq[i]= (1-m$alpha[j]-m$beta[j])*m$long_run_var[j]+m$alpha[j]*sp_subset[i-1,1]+m$beta[j]*sigma_sq[i-1]
}
m$var_garch[j]= (1-m$alpha[j]-m$beta[j])*m$long_run_var[j]+m$alpha[j]*sp_subset[1000,1]+m$beta[j]*sigma_sq[1000]
}
sqrt(m$var_garch)
#Question 2:
#part a:
var_forecast<- rep(0,4)
for (j in 1:4)
{
for (i in 1:21)
{
var_forecast[j]= (m$alpha[j]+m$beta[j])^(i-1)*(m$var_garch[j]-m$long_run_var[j])
}
var_forecast[j]= var_forecast[j] + 21*m$long_run_var[j]
}
#part b:
annualized_st.dev <- sqrt(var_forecast*252/21)
forecasts<- cbind(var_forecast,annualized_st.dev)
#Question 3:
#part a:
log_likelihood_4<-function(theta,x){
sigma_square_4=vector(mode="numeric",length=1000)
sigma_square_4[1]=theta[4]^2
for(i in 2:1000){
sigma_square_4[i]=(1-theta[1]*(1+theta[5]^2)-theta[2])*theta[3]^2+theta[1]*(sqrt(x[i-1])-theta[5]*sqrt(sigma_square_4[i-1]))^2+theta[2]*sigma_square_4[i-1]
}
logl<-(-0.5)*sum(log(sigma_square_4)+x/sigma_square_4)
return(-logl)
}
initial_value_4=c(mle$par[1],mle$par[2],mle$par[3],mle$par[4],0)
mle_4=optim(initial_value_4,log_likelihood_4,x=sp_subset[,1])
mle_4$par
#part b:
mle$value
mle_4$value
#those are already logs of likelihood
LR = 2*log(mle_4$value/mle$value)
#H0: theta[5]=0 Reject if LR>Chi-square test
#fail to reject H0 for both
qchisq(0.05, df=1)
qchisq(0.01, df=1)
LR
forecasts
#Question 1:
#Part a:
library(quantmod)
#get the data
getSymbols("^GSPC")
sp <- GSPC[,6]
sp <- as.data.frame(sp)
colnames(sp) <- "Prices"
rm(GSPC)
sp <- na.omit(sp)
#compute log returns
sp$temp <- log(sp$Prices)
sp$logreturns[2:nrow(sp)]<- diff(sp$temp, lag=1)
sp<- sp[-2]
#Initial guesses
start=2552-999
end=2552
sp_subset<- (sp$logreturns[start:end])^2
sp_subset<- as.data.frame(sp_subset)
sample_variance<- mean(sp_subset[,1])
first_variance<- mean(sp_subset$sp_subset[1:10])
#MLE Function
log_likelihood <- function(theta,x){
sigma_square=vector(mode="numeric",length=1000)
sigma_square[1]=theta[4]^2
for(i in 2:1000){
sigma_square[i]=(1-theta[1]-theta[2])*theta[3]^2+theta[1]*x[i-1]+theta[2]*sigma_square[i-1]
}
logl<-(-0.5)*(sum(log(sigma_square)+x/sigma_square))
return(-logl)
}
initial_value=c(0.18,0.7,sqrt(sample_variance),sqrt(first_variance))
mle=optim(initial_value,log_likelihood,x=sp_subset[,1])
mle$par
#part b:
log_likelihood_1 <- function(theta,x){
sigma_square_1=vector(mode="numeric",length=1000)
sigma_square_1[1]=theta[3]^2
for(i in 2:1000){
sigma_square_1[i]=(1-theta[1]-theta[2])*sample_variance+theta[1]*x[i-1]+theta[2]*sigma_square_1[i-1]
}
logl<-(-0.5)*(sum(log(sigma_square_1)+x/sigma_square_1))
return(-logl)
}
initial_value_1=c(0.18,0.7,sqrt(first_variance))
mle_1<- optim(initial_value_1,log_likelihood_1, x=sp_subset[,1])
mle_1$par
print(sqrt(sample_variance))
#part c:
log_likelihood_2 <- function(theta,x){
sigma_square_2=vector(mode="numeric",length=1000)
sigma_square_2[1]=sample_variance
for(i in 2:1000){
sigma_square_2[i]=(1-theta[1]-theta[2])*theta[3]^2+theta[1]*x[i-1]+theta[2]*sigma_square_2[i-1]
}
logl<-(-0.5)*(sum(log(sigma_square_2)+x/sigma_square_2))
return(-logl)
}
initial_value_2=c(0.18,0.7,sqrt(sample_variance))
mle_2=optim(initial_value_2,log_likelihood_2,x=sp_subset[,1])
mle_2$par
#part d:
log_likelihood_3 <- function(theta,x){
sigma_square_3=vector(mode="numeric",length=1000)
sigma_square_3[1]=sample_variance
for(i in 2:1000){
sigma_square_3[i]=(1-theta[1]-theta[2])*sample_variance+theta[1]*x[i-1]+theta[2]*sigma_square_3[i-1]
}
logl<-(-0.5)*(sum(log(sigma_square_3)+x/sigma_square_3))
return(-logl)
}
initial_value_3=c(0.18,0.7)
mle_3=optim(initial_value_3,log_likelihood_3,x=sp_subset[,1])
mle_3$par
#part e:
m<- as.data.frame(rbind(c(mle$par[1:2], mle$par[3]^2,mle$par[4]^2), c(mle_1$par[1:2],sample_variance,mle_1$par[3]^2), c(mle_2$par[1:2],mle_2$par[3]^2,first_variance), c(mle_3$par, sample_variance,first_variance)))
colnames(m)<- c("alpha", "beta", "long_run_var","first_variance")
rownames(m)<- c("part a", "part b", "part c", "part d")
m$var_garch <- NA
sigma_sq = vector(mode="numeric",length=1000)
for (j in 1:4)
{
sigma_sq[1]=m$first_variance[j]
for (i in 2:1000)
{
sigma_sq[i]= (1-m$alpha[j]-m$beta[j])*m$long_run_var[j]+m$alpha[j]*sp_subset[i-1,1]+m$beta[j]*sigma_sq[i-1]
}
m$var_garch[j]= (1-m$alpha[j]-m$beta[j])*m$long_run_var[j]+m$alpha[j]*sp_subset[1000,1]+m$beta[j]*sigma_sq[1000]
}
sqrt(m$var_garch)
#Question 2:
#part a:
var_forecast<- rep(0,4)
for (j in 1:4)
{
for (i in 1:21)
{
var_forecast[j]= (m$alpha[j]+m$beta[j])^(i-1)*(m$var_garch[j]-m$long_run_var[j])
}
var_forecast[j]= var_forecast[j] + 21*m$long_run_var[j]
}
#part b:
annualized_st.dev <- sqrt(var_forecast*252/21)
forecasts<- cbind(var_forecast,annualized_st.dev)
forecasts
#Question 3:
#part a:
log_likelihood_4<-function(theta,x){
sigma_square_4=vector(mode="numeric",length=1000)
sigma_square_4[1]=theta[4]^2
for(i in 2:1000){
sigma_square_4[i]=(1-theta[1]*(1+theta[5]^2)-theta[2])*theta[3]^2+theta[1]*(sqrt(x[i-1])-theta[5]*sqrt(sigma_square_4[i-1]))^2+theta[2]*sigma_square_4[i-1]
}
logl<-(-0.5)*sum(log(sigma_square_4)+x/sigma_square_4)
return(-logl)
}
initial_value_4=c(mle$par[1],mle$par[2],mle$par[3],mle$par[4],0)
mle_4=optim(initial_value_4,log_likelihood_4,x=sp_subset[,1])
mle_4$par
#part b:
mle$value
mle_4$value
LR = 2*log(mle_4$value/mle$value)
LR
qchisq(0.05, df=1)
qchisq(0.01, df=1)
mle$par
mle_1$par
sample_variance
sqrt(sample_variance)
mle_2$par
mle_3$par
m<- as.data.frame(rbind(c(mle$par[1:2], mle$par[3]^2,mle$par[4]^2), c(mle_1$par[1:2],sample_variance,mle_1$par[3]^2), c(mle_2$par[1:2],mle_2$par[3]^2,first_variance), c(mle_3$par, sample_variance,first_variance)))
colnames(m)<- c("alpha", "beta", "long_run_var","first_variance")
rownames(m)<- c("part a", "part b", "part c", "part d")
m$var_garch <- NA
sigma_sq = vector(mode="numeric",length=1000)
for (j in 1:4)
{
sigma_sq[1]=m$first_variance[j]
for (i in 2:1000)
{
sigma_sq[i]= (1-m$alpha[j]-m$beta[j])*m$long_run_var[j]+m$alpha[j]*sp_subset[i-1,1]+m$beta[j]*sigma_sq[i-1]
}
m$var_garch[j]= (1-m$alpha[j]-m$beta[j])*m$long_run_var[j]+m$alpha[j]*sp_subset[1000,1]+m$beta[j]*sigma_sq[1000]
}
sqrt(m$var_garch)
mle$par
mle_4$par
mle$value
mle_4$value
LR = 2*log(mle_4$value/mle$value)
LR
qchisq(0.05, df=1)
qchisq(0.01, df=1)
